import UIKit
import RealmSwift
import KakaoSDKAuth

class SceneDelegate: UIResponder, UIWindowSceneDelegate {
    var window: UIWindow?

    func printRealmPath() {
        if let fileURL = Realm.Configuration.defaultConfiguration.fileURL {
            print("üìÇ Realm file path: \(fileURL.path)")
        } else {
            print("‚ö†Ô∏è Realm file URL not found.")
        }
    }

    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {
        guard let windowScene = (scene as? UIWindowScene) else { return }
        window = UIWindow(windowScene: windowScene)
        
        let rootVC: UIViewController
        if RealmManager.shared.getUser() != nil {
            rootVC = GiftyTabBarController()
        } else {
            rootVC = NicknameViewController()
        }
        
        let navController = UINavigationController(rootViewController: rootVC)
        window?.rootViewController = navController
        window?.makeKeyAndVisible()
        printRealmPath()
    }

    func sceneDidDisconnect(_ scene: UIScene) {}
    func sceneDidBecomeActive(_ scene: UIScene) {
        checkAndUpdateExpiredGifts()
    }
    func sceneWillResignActive(_ scene: UIScene) {}
    func sceneWillEnterForeground(_ scene: UIScene) {
        checkAndUpdateExpiredGifts()
    }
    func sceneDidEnterBackground(_ scene: UIScene) {}
    
    // URL Ïä§ÌÇ¥ Ï≤òÎ¶¨ (iOS 13+)
    func scene(_ scene: UIScene, openURLContexts URLContexts: Set<UIOpenURLContext>) {
        if let url = URLContexts.first?.url {
            print("===== SceneDelegate URL ÏàòÏã† =====")
            print("URL: \(url.absoluteString)")
            print("Scheme: \(url.scheme ?? "nil")")
            print("Host: \(url.host ?? "nil")")
            print("=================================")
            
            // Ïπ¥Ïπ¥Ïò§ÌÜ° Ïù∏Ï¶ù Ï≤òÎ¶¨
            if AuthApi.isKakaoTalkLoginUrl(url) {
                _ = AuthController.handleOpenUrl(url: url)
            }
            
            // Îî•ÎßÅÌÅ¨ Ï≤òÎ¶¨
            handleDeepLink(url: url)
        }
    }
    
    // Îî•ÎßÅÌÅ¨ Ï≤òÎ¶¨ Ìï®Ïàò
    private func handleDeepLink(url: URL) {
        guard url.scheme == "gifty" else { return }
        
        print("===== Îî•ÎßÅÌÅ¨ Ï≤òÎ¶¨ =====")
        print("URL: \(url.absoluteString)")
        
        if url.host == "gifticon",
           let components = URLComponents(url: url, resolvingAgainstBaseURL: false),
           let giftId = components.queryItems?.first(where: { $0.name == "id" })?.value {
            
            print("‚úÖ Í∏∞ÌîÑÌã∞ÏΩò ID: \(giftId)")
            print("=======================")
            
            NotificationCenter.default.post(
                name: NSNotification.Name("OpenGifticon"),
                object: nil,
                userInfo: ["giftId": giftId]
            )
        } else {
            print("‚ùå Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏùÄ Îî•ÎßÅÌÅ¨ ÌòïÏãù")
            print("=======================")
        }
    }
    private func checkAndUpdateExpiredGifts() {
        let gifts = RealmManager.shared.getGifts()
        
        try? RealmManager.shared.realm.write {
            for gift in gifts {
                if gift.checkIsExpired && !gift.isExpired {
                    gift.isExpired = true
                    print("üóìÔ∏è ÎßåÎ£å Ï≤òÎ¶¨: \(gift.name)")
                }
            }
        }
    }
}

